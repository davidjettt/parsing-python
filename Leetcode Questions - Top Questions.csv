Category,Name,Link,Notes
Arrays,Two Sum,https://leetcode.com/problems/two-sum/,use hashmap to store seen values; check if 2nd num is in hashmap
Arrays,Best Time to Buy and Sell Stock,https://leetcode.com/problems/best-time-to-buy-and-sell-stock/,sliding window; compare current profit with result if price at left pointer is less than price at right pointer; otherwise left becomes right; right always increments by 1
Arrays,Contains Duplicate II,https://leetcode.com/problems/contains-duplicate-ii/,sliding window; start and end == 0; while looping add values to seen set; return True of currValue is in seen; if difference of window pointers > k remove value at windowStart from set and increment windowStart by 1; each iteration add 1 to windowEnd; METHOD #2: store values in hashmap with index; if find number that is a duplicate and difference of index less than k then return true; if go through the whole array return false
Arrays,Contains Duplicate,https://leetcode.com/problems/contains-duplicate/,"sliding window; sort array; start = 0; end is iterator range(1, len(arr)); if value at start and end not a duplicate then increment start by 1"
Arrays,Majority Element,https://leetcode.com/problems/majority-element/,"METHOD #1: create frequency hashmap of each number in input array; iterate through hashmap and check if frequency is greater than half the array length; METHOD #2: boyers-myer algo; set first value as majority element; each occurence of that element, increment count by one; else decrement count by 1; once count is 0, reassign majority to current value i is pointing to; repeat"
Arrays,Squares of a Sorted Array,https://leetcode.com/problems/squares-of-a-sorted-array/,"two pointers(left=0, right=len(arr) - 1); create result array with length of input array; init result pointer to last value of result array; compare squares of left, right pointer values and add bigger one to result array; move result pointer each time"
Arrays,Find All Numbers Disappeared in an Array,https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/,
Arrays,Remove Element,https://leetcode.com/problems/remove-element/,two pointer; left pointer = 0 and represents length of values that aren't removed; right pointer is the iterator; if right is not pointing to target value then reassign left pointer's value to right pointer value and increment left pointer by 1
Arrays,Sort Colors,https://leetcode.com/problems/sort-colors/,"sorting; dutch national flag algo; 3 pointers (low, mid, high); mid numbers will automatically be sorted if we sort low and high numbers"
Arrays,Two Sum ii - Array Sorted,https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/,two pointers; compare target with sum of values; adjust pointers based off that
Arrays,3Sum Closest,https://leetcode.com/problems/3sum-closest/,"two pointers; sort input array; compare abs of sum - target of i, left, right with res; reassign res if smaller than res; and shift pointers accordingly "
Arrays,3Sum,https://leetcode.com/problems/3sum/,two pointers; sort input array; check for duplicates; move pointers based off of totalSum value to target value; if totalSum == 0 append values as an array to result array; check for duplicates again in while loop
Arrays,Insert Interval,https://leetcode.com/problems/insert-interval/,"during for loop: check if end of new interval is less than start of current interval; else if check if start of new interval is greater than end of current interval;  else change new interval (start is min value between new and current interval, end is the highest between the two)"
Arrays,Merge Intervals,https://leetcode.com/problems/merge-intervals/description/,"sort intervals by start time; merge intervals if they overlap, otherwise do nothing"
Arrays,Minimum Size Subarray Sum,https://leetcode.com/problems/minimum-size-subarray-sum/,"sliding window; window length is size of subarray; iterate through input array and add nums to a sum; once sum reaches target, get the window length and then shift left pointer (repeat this process in case there is a shorter window)"
Arrays,Maximum Subarray,https://leetcode.com/problems/maximum-subarray/,"smallest possible max subarray sum is 0 b/c an empty array is considered a subarry; iterate through array and add value to curr_sum variable; if curr_sum variable goes below 0, then set it back to 0; get max between curr_sum and result variable"
Arrays,Top K Frequent Elements,https://leetcode.com/problems/top-k-frequent-elements/,bucket sort; length of bucket sort array is length of input array (worse case scenario); each index number of bucket sort array is frequency and bucket sort array[i] is an array of numbers that have that count
Arrays,Valid Sudoku,https://leetcode.com/problems/valid-sudoku/,"iterate through every square of the board, adding values to rows, cols, and squares hashset; for squares, store location as a pair (r // 3, c // 3)"
Arrays,Longest Consecutive Sequence,https://leetcode.com/problems/longest-consecutive-sequence/,use hashset; only check for sequence if current number is the beginning of the sequence (aka n - 1 does not exist in hashset)
Arrays,Container With Most Water,https://leetcode.com/problems/container-with-most-water/,two pointers; start pointers at the ends because that gives us biggest x-axis length; get area by calculating y-axis and x-axis lengths; move pointer that is the lower height
Arrays,Next Permutation,https://leetcode.com/problems/next-permutation/description/,two pointers; find number that is less than previous number; sort all numbers preceding that number; go through array again to swap THAT number with a number less than it
Arrays,Subarray Product Less Than K,https://leetcode.com/problems/subarray-product-less-than-k/,sliding window; left pointer = 0; right pointer is iterator; multiply current product var by right pointer value; keep moving left pointer until current product is less than k; then if right pointer is >= left pointer we have a valid subarray so add length of window to result
Arrays,Find the Duplicate Number,https://leetcode.com/problems/find-the-duplicate-number/,Floyd's algorithm
Backtracking,Subsets,https://leetcode.com/problems/subsets/description/,two decisions: either include current number or not include it
Backtracking,Generate Parentheses,https://leetcode.com/problems/generate-parentheses/description/,keep track of number of opening and closing parentheses; only append opening parenthesis if opening is less than n; only append closing parenthesis if closing is less than opening
Backtracking,Permutations,https://leetcode.com/problems/permutations/description/,
Backtracking,Combination Sum,https://leetcode.com/problems/combination-sum/,append numbers into subarray and once the sum exceeds target then backtrack (pop number from subarray and try again with the next number)
Backtracking,Letter Combinations of a Phone Number,https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/,use hashmap to map out digit to letters
Backtracking,Word Search,https://leetcode.com/problems/word-search/description/,cleaning up is removing from set
Binary Search,Binary Search,https://leetcode.com/problems/binary-search/,divide and conquer
Binary Search,First Bad Version,https://leetcode.com/problems/first-bad-version/,divide and conquer
Binary Search,Koko Eating Bananas,https://leetcode.com/problems/koko-eating-bananas/,binary search; range of k has to be between 1 to max(piles)
Binary Search,Search in Rotated Sorted Array,https://leetcode.com/problems/search-in-rotated-sorted-array/,
Binary Search,Time Based Key-Value Store,https://leetcode.com/problems/time-based-key-value-store/description/,use hashmap to store key and all corresponding values and timestamps; want to update the result with the value each time we are getting closer to the timestamp; timestamps that are bigger than given timestamp are irrelevant to the result
Binary Search,Search a 2D Matrix,https://leetcode.com/problems/search-a-2d-matrix/,"perfrom binary search to find out which subarray target could be in; will be calculating a mid row and comparing target with lowest and highest value of that row; once found subarray, perform another binary search on that "
Bit Manipulation,Add Binary,https://leetcode.com/problems/add-binary/,
Dynamic Programming,Climbing Stairs,https://leetcode.com/problems/climbing-stairs/,subproblem; next result builds off of previous result
Dynamic Programming,Min Cost Climbing Stairs,https://leetcode.com/problems/min-cost-climbing-stairs/description/,BOTTOM UP: get min for each jump and add that to current step; TOP DOWN: dfs; get min of each branch
Dynamic Programming,Maximum Product Subarray,https://leetcode.com/problems/maximum-product-subarray/,keep track of both current subarray's max and min values; reset variables to 1 if encounter a 0
Dynamic Programming,House Robber,https://leetcode.com/problems/house-robber/,"since can't rob adjacent houses, get the max between the current house + the house 2 houses down and the house 1 down from the current house"
Dynamic Programming,House Robber II,https://leetcode.com/problems/house-robber-ii/,"since first and last houses are considered adjacent, get the max we can rob between everything but the first house and everything but the last house"
Dynamic Programming,Longest Increasing Subsequence,https://leetcode.com/problems/longest-increasing-subsequence/description/,
Dynamic Programming,Partition Equal Subset Sum,https://leetcode.com/problems/partition-equal-subset-sum/description/,MEMO APPROACH: do dfs when adding a number and another dfs when not adding a number (backtrack approach)
Dynamic Programming,Coin Change,https://leetcode.com/problems/coin-change/description/,dfs top-down approach: compute min num of coins to reach target at each given amount and store in cache; 
Dynamic Programming,Coin Change II,https://leetcode.com/problems/coin-change-ii/description/,"0/1 knapsack; MEMO APPROACH: do 2 separate dfs(one when adding current coin and one without adding current coin, but moving on to next coin)"
Dynamic Programming,Unique Paths,https://leetcode.com/problems/unique-paths/description/,add up return value from dfs on row - 1 and dfs on col - 1
Dynamic Programming,Word Break,https://leetcode.com/problems/word-break/,TOP-DOWN: break word up to prefix and see if it is in wordDict
Dynamic Programming,Word Break II,https://leetcode.com/problems/word-break-ii/description/,go through string and run dfs on each time substring is in wordDict run dfs on the suffix
Graphs,Flood Fill,https://leetcode.com/problems/flood-fill/,"edge cases: if image is None or if starting pixel is already the new color; use dfs to recursively visit each pixel (up, down, left, right) and change the color; also need to check if we are in bounds and if current pixel is a valid pixel to change color"
Graphs,Island Perimeter,https://leetcode.com/problems/island-perimeter/,dfs; loop through matrix and run dfs when we find a 1; if neighbor of the 1 is out of bounds or is 0 then that means it is the edge of the island so return 1; recursively call dfs on all directions and add return value to perimeter sum; if already visited coordinate then return 0
Graphs,Number of Islands,https://leetcode.com/problems/number-of-islands/,"bfs; if current value in nested for loop is an island, run bfs on that node in order to check any other islands adjacent to it"
Graphs,Max Area of Islands,https://leetcode.com/problems/max-area-of-island/,"dfs; iterate through matrix; if encounter a 1, run dfs and counting each 1 along to way; get the max of result and current area; repeat"
Graphs,Shortest Bridge,https://leetcode.com/problems/shortest-bridge/,"bfs; use dfs to find all 1s that make up first island; run bfs on each ""layer"" of the queue, if node is a 1 then have reached second island; else add nodes to queue & set; every ""layer"" is 1 step so increment result after that loop ends"
Graphs,01 Matrix,https://leetcode.com/problems/01-matrix/,"bfs; instead of finding 1s and calling bfs on each one, put all the 0s in a queue and mark coords as visited; then run bfs on that queue and will only mutate matrix if come across coords that equal to 1 since all 0s are in visited set"
Graphs,Clone Graph,https://leetcode.com/problems/clone-graph/,"dfs; use hashmap to store old and new nodes; run dfs on start node which will also make a copy of the old node; run dfs on each neighbor to make copies of them; return value of dfs is copy neighbor, so append that to copy node's neighbors;  base case is when we already have a copy node;"
Graphs,Course Schedule,https://leetcode.com/problems/course-schedule/,"dfs (cycle detection); make adjacentcy list of courses and their prereqs; run dfs on each course; it is a cycle if it is in visited set; once gone through a path and confirm it is true, we can remove from set and set its prereqs to be an empty array in case run dfs on it again"
Graphs,Rotten Oranges,https://leetcode.com/problems/rotting-oranges/,bfs; add all rotten oranges to queue; also keep track of number of fresh oranges; do bfs on every rotten orange currently in the queue (this represents 1 minute)
Graphs,All Paths From Source to Target,https://leetcode.com/problems/all-paths-from-source-to-target/,build path recursively
Greedy,Jump Game,https://leetcode.com/problems/jump-game/,"greedy; reverse thinking, working backwards; start from the last index; if the index number (this is how many spaces we have jump over) + the current jump is greater than the current goal then we can move goal pointer; know we have reached the end if after iteration the goal pointer is equal to the start index"
Greedy,Jump Game II,https://leetcode.com/problems/jump-game-ii/,"greedy; use two pointers to represent a list of jumps we can make; iterate through the window to get the farthest jump we can make; to move on to the next window, left pointer becomes right pointer + 1 and right pointer becomes the farthest jump"
Heaps,Kth Largest Element in a Stream,https://leetcode.com/problems/kth-largest-element-in-a-stream/description/,use minHeap that has a size of k
Heaps,K Closest Points to Origin,https://leetcode.com/problems/k-closest-points-to-origin/,"use minHeap to store arrays with distance, x coord, and y coord"
Heaps,Design Twitter,https://leetcode.com/problems/design-twitter/description/,
Heaps,Task Scheduler,https://leetcode.com/problems/task-scheduler/,"maxHeap & queue; get count of every task to populate maxHeap, a task is completed each time pop from maxHeap; only pop from queue if time == idleTime"
Linked Lists,Merge Two Sorted Lists,https://leetcode.com/problems/merge-two-sorted-lists/,use dummy node; traverse both lists at the same time; point dummy node to lower value between the two list nodes; once a lists exhausts nodes point dummy node to other list
Linked Lists,Linked List Cycle,https://leetcode.com/problems/linked-list-cycle/,floyd's tortoise and hare algo; have slow and fast pointer; slow pointer moves 1 spot; fast pointer moves 2 spots; return True if slow and fast pointer meet
Linked Lists,Middle of the Linked List,https://leetcode.com/problems/middle-of-the-linked-list/,traverse list (length / 2) + 1
Linked Lists,Reverse Linked List,https://leetcode.com/problems/reverse-linked-list/,"keep track of prev and curr pointers; save curr.next to temp variable; set curr.next to prev, prev to curr, curr to temp variable"
Linked Lists,Reorder List,https://leetcode.com/problems/reorder-list/description/,use fast and slow pointer to find middle; split list to 2 lists and reverse the second list; initialize pointers at head of both lists and begin merging nodes
Linked Lists,Add Two Numbers,https://leetcode.com/problems/add-two-numbers/,two pointers; go through both lists and add values taking into account if there is a carry over
Linked Lists,Remove Nth Node From End of List,https://leetcode.com/problems/remove-nth-node-from-end-of-list/,two pointers; the distance between left and right pointer is n; use a dummy node to help with deletion
Linked Lists,Design Linked List,https://leetcode.com/problems/design-linked-list/,
Linked Lists,Design Browser History,https://leetcode.com/problems/design-browser-history/,
Linked Lists,Copy List with Random Pointer,https://leetcode.com/problems/copy-list-with-random-pointer/,make 2 passes of original list; use hashmap to store original node as the key and copy node as the value; create the pointers in the 2nd pass
Linked Lists,LRU Cache,https://leetcode.com/problems/lru-cache/,"doubly linked list; left dummy node = LRU, right dummy node = most recent; inserts go right before the right dummy node; removal of LRU is next of left dummy node"
Linked Lists,Merge k Sorted Lists,https://leetcode.com/problems/merge-k-sorted-lists/description/,nLOGk Solution: go through input array and merge 2 lists and put it into an array; assign that array as new input array and repeat until length of input array is reduced to 1
Prefix Sums,Find Pivot Index,https://leetcode.com/problems/find-pivot-index/description/,keep track of leftSum and rightSum; remove pivot value from rightSum; if two sums aren't equal then add to leftSum before going to next iteration
Prefix Sums,Product of Array Except Self,https://leetcode.com/problems/product-of-array-except-self/,prefix sum; first pass: populate result array with prefix product; second pass: multiply prefix products in result array with postfix product
Prefix Sums,Subarray Sum Equals K,https://leetcode.com/problems/subarray-sum-equals-k/,
Queue,Implement Queue using Stacks,https://leetcode.com/problems/implement-queue-using-stacks/,
Stacks,Implement Stack using Queues,https://leetcode.com/problems/implement-stack-using-queues/,"For pop, keep removing element from front and append to back until at the last original element; pop and return that last original element"
Stacks,Min Stack,https://leetcode.com/problems/min-stack/,use another stack to keep track of the min value at each push call
Stacks,Decode String,https://leetcode.com/problems/decode-string/,"keep filling stack; when find closing bracket, pop from stack to form string and number and form new string and then append back to stack"
Stacks,Evaluation Reverse Polish Notation,https://leetcode.com/problems/evaluate-reverse-polish-notation/,"stack; loop through array; push numbers into the stack; when at an operator, pop off two values from stack, compute the result of the two values using operator and push result back into stack; repeat"
Stacks (Monotonic),Daily Temperatures,https://leetcode.com/problems/daily-temperatures/,"Monotonic decreasing stack; keep track of pair in stack (temp., idx); start popping once at a temp that is greater than top of the stack"
Stacks,Basic Calculator,https://leetcode.com/problems/basic-calculator/description/,
Strings,Longest Common Prefix,https://leetcode.com/problems/longest-common-prefix/,
Strings,Valid Parentheses,https://leetcode.com/problems/valid-parentheses/,stack; use hashmap to store closing and opening parentheses respectively; during iteration add character to stack if not in hashmap; if in hashmap check if last value of stack is the same as the value pair of the char in the hashmap; check length of stack in the end
Strings,Valid Palindrome,https://leetcode.com/problems/valid-palindrome/,"use comprehension to create iterable that is only alphanumeric, join to string, lowercase it, and compare it with its reverse []"
Strings,Valid Anagram,https://leetcode.com/problems/valid-anagram/,"1) use sorted method 2) use hashmap to store character frequencies of one string; iterate other string to check if character exists in hashmap; if yes, decrement by 1, once it hits 0, delete the key; if character doesn't exist return false; return boolean based on length of hashmap at the end"
Strings,Ransom Note,https://leetcode.com/problems/ransom-note/,hashmap; store frequency of characters of magazine in hashmap; iterate through ransomNote and if char isn't in hashmap then return False;
Strings,Substrings of Size Three With Distinct Characters,https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters/,sliding window length will always be 3; loop through input string; store letters in sliding window into hashset; if length of hashset is 3 then increment result count by 1; move sliding window and repeat
Strings,Roman to Integer,https://leetcode.com/problems/roman-to-integer/,keep track of the previous roman numeral value
Strings,Is Subsequence,https://leetcode.com/problems/is-subsequence/,two pointer; iterate through both strings at the same time using while loop; increment pointer of main string if character comparison is false; otherwise increment both pointers by 1; if pointer of substring reaches out of bounds then True; else False
Strings,Count Pairs of Similar Strings,https://leetcode.com/problems/count-pairs-of-similar-strings/description/,FORUMULA TO COUNT UNIQUE PAIRS => n(n - 1) // 2
Strings,Integer to Roman,https://leetcode.com/problems/integer-to-roman/,store FULL numeral and value in nested list or hashmap; must iterate from highest to lowest; num floor divided by value gives us how many symbols we need; num % value gives us next value num should be
Strings,Longest Substring Without Repeating Characters,https://leetcode.com/problems/longest-substring-without-repeating-characters/,sliding window; increment right pointer if it points to character not in hashset; add character to hashset; get the max between result and window length; if character already in hashset then need to slide the window by removing character left pointer is pointing to from hashset and increment left pointer
Strings,Longest Repeating Character Replacement,https://leetcode.com/problems/longest-repeating-character-replacement/,sliding window; use hashmap to store character count of window; find max character count in window and subtract it from window length leaving number of letters that can be changed; compare with k
Strings,Group Anagrams,https://leetcode.com/problems/group-anagrams/,1) loop through strings; check if sorted version of string is in hashmap; sorted version is the key of hashmap; if not add to hashmap in array; else append to array    2) convert string to its ascii value and use that as comparator
Strings,Palindromic Substrings,https://leetcode.com/problems/palindromic-substrings/,"check if string is palindrome by checking the middle first, then expand out; take into account pointer positions for odd vs. even length palindromes "
Strings,Longest Palindromic Substring,https://leetcode.com/problems/longest-palindromic-substring/,"check if string is palindrome by checking the middle first, then expand out; take into account pointer positions for odd vs. even length palindromes "
Strings,Permutation in a String,https://leetcode.com/problems/permutation-in-string/,make starting frequency maps for both strings; update hashmap for s2 as we move the window
Strings,Find All Anagrams in a String,https://leetcode.com/problems/find-all-anagrams-in-a-string/,sliding window; use two hashmaps
Strings,String to Integer,https://leetcode.com/problems/string-to-integer-atoi/description/,lots of if statements
Trees,Invert Binary Tree,https://leetcode.com/problems/invert-binary-tree/,dfs; swap root.left with root.right; traverse tree doing this with recursion
Trees,Balanced Binary Tree,https://leetcode.com/problems/balanced-binary-tree/,dfs; get the height of each subtree; if the difference of the height is less than or equal to 1 then that subtree is balanced; recursively do that for every subtree
Trees,Same Tree,https://leetcode.com/problems/same-tree/,recursively check branches only if root of both trees are the same; return false if one root is null but other root is not null
Trees,Subtree of Another Tree,https://leetcode.com/problems/subtree-of-another-tree/description/,do dfs on first tree searching for matching roots with the second tree; if find match then check if those 2 subtrees are the same
Trees,Path Sum,https://leetcode.com/problems/path-sum/,recursively add current node's value to running sum; return boolean if reached target number; bubble back up and do same thing for other branch
Trees,Maximum Depth of Binary Tree,https://leetcode.com/problems/maximum-depth-of-binary-tree/,get max height between left and right sides
Trees,Diameter of a Binary Tree,https://leetcode.com/problems/diameter-of-binary-tree/,dfs; need to find max depth of each subtree; basically sum of left + right; each return of recursive call is going back up one level so add 1 to subtree that is bigger
Trees,Lowest Common Ancestor of a Binary Search Tree,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/,By nature of BST structure where we traverse to find LCA will depend on if p and q values are BOTH less than or greater than current node's value;
Trees,Validate Binary Search Tree,https://leetcode.com/problems/validate-binary-search-tree/description/,create left and right boundaries and update those with each recursive call
Trees,Flatten Binary Tree to Linked List,https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/,STACK: since we want pre order traversal put right child in stack before putting left child in stack; make right pointer reference for popped node to point to last node in stack; left pointer always points to None
Trees,Count Complete Tree Nodes,https://leetcode.com/problems/count-complete-tree-nodes/,"get height of left and right subtrees; if left subtree height is bigger than right subtree then we don't have a completely filled tree, so need to recursively compute height of left and right child subtrees which should equal num of nodes"
Trees,Lowest Common Ancestor of a Binary Tree,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/,"check for 3 cases: when two nodes are on opposite sides of tree, when p is descendent of q, and when q is descendent of p "
Trees,Binary Tree Right Side View,https://leetcode.com/problems/binary-tree-right-side-view/description/,BFS; do level order traversal and get the most right value at each level which will be the last node in queue after each level check
Trees,Construct Binary Tree From Preorder and Inorder Traversal,https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/,root is always first in preorder traversal; split preorder and inorder arrays based off of where the root is located in the inorder array
Trees,Convert Sorted Array to Binary Search Tree,https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/,binary search; each mid computed is the root of each subtree for left and right branches
Trees,Kth Smallest Element in a BST,https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/,in order traversal prints nodes in ascending order in BST
Trees,Delete Node in a BST,https://leetcode.com/problems/delete-node-in-a-bst/description/,"3 cases: 0 children, 1 children, 2 children"
Trees,Minimum Height Trees,https://leetcode.com/problems/minimum-height-trees/description/,
Tries,Implement Trie (Prefix Tree),https://leetcode.com/problems/implement-trie-prefix-tree/description/,create TrieNode class with children being a hashmap of all 26 lowercase letters;